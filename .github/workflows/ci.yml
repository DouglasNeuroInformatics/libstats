name: Build and Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
jobs:
  configure:
    runs-on: ubuntu-22.04
    outputs:
      package_name: ${{ steps.define.outputs.PACKAGE_NAME }}
      package_version: ${{ steps.define.outputs.PACKAGE_VERSION }}
      release_version: ${{ steps.define.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - id: define
        run: |
          echo "PACKAGE_NAME=$(cat package.json | jq -r .name | xargs basename)" | sudo tee -a "$GITHUB_OUTPUT"
          echo "PACKAGE_VERSION=$(cat package.json | jq -r .version)" | sudo tee -a "$GITHUB_OUTPUT"
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" | sudo tee -a "$GITHUB_OUTPUT"
  debug:
    runs-on: ubuntu-22.04
    needs: [configure]
    steps:
      - name: print
        run: |
          echo ${{ needs.configure.outputs.release_version }}
  # build:
  #   needs: [configure]
  #   permissions:
  #     contents: write
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       platform:
  #         - os: 'ubuntu-22.04'
  #           target: 'x86_64-unknown-linux-musl'
  #         - os: 'ubuntu-22.04'
  #           target: 'aarch64-unknown-linux-musl'
  #         - os: 'macos-latest'
  #           target: 'x86_64-apple-darwin'
  #         - os: 'macos-latest'
  #           target: 'aarch64-apple-darwin'
  #   runs-on: ${{ matrix.platform.os }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 'lts/iron'
  #         cache: 'pnpm'
  #     - name: Install Cross-Compilation Dependencies (Ubuntu)
  #       if: matrix.platform.target == 'aarch64-unknown-linux-musl'
  #       run: sudo apt-get install -y gcc-aarch64-linux-gnu
  #     - name: Install Node Dependencies
  #       run: pnpm install
  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: ${{ matrix.platform.target }}
  #     - name: Setup Rust Cache
  #       uses: swatinem/rust-cache@v2
  #     - name: Compile Binary
  #       run: pnpm build --release --target ${{ matrix.platform.target }}
  #     - name: 'Tar Binary'
  #       run: |
  #         tar -czvf ${{ needs.configure.outputs.package_name }}-${{ matrix.platform.target }}.tar.gz ./dist/index.node
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ needs.configure.outputs.package_name }}-${{ matrix.platform.target }}
  #         path: ${{ needs.configure.outputs.package_name }}-${{ matrix.platform.target }}.tar.gz
  #         if-no-files-found: 'error'
  # publish-release:
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-22.04
  #   needs: [configure, build]
  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         merge-multiple: true
  #     - name: Publish Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         prerelease: ${{ contains(needs.configure.outputs.package_version, 'alpha') || contains(needs.configure.outputs.package_version, 'beta')  }}
  #         files: ${{ needs.configure.outputs.package_name }}-*.tar.gz
  #         tag_name: ${{ needs.configure.outputs.package_name }}-v${{ needs.configure.outputs.package_version }}
